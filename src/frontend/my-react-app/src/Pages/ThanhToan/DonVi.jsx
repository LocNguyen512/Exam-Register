import React, { useState } from 'react';

function DonVi() {
  const [searchTerm, setSearchTerm] = useState('');
  const [searchType, setSearchType] = useState('ten_don_vi');
  const [customerData, setCustomerData] = useState(null);
  const [certificateData, setCertificateData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [notFound, setNotFound] = useState(false);

  const handleSearch = async () => {
    let url = '';
    const params = { [searchType]: searchTerm };

    if (searchType === 'ten_don_vi') {
      url = 'http://127.0.0.1:5000/thanhtoandonvi/timkiem_theo_ten_don_vi';
    } else if (searchType === 'ma_kh') {
      url = 'http://127.0.0.1:5000/thanhtoandonvi/timkiem_theo_ma_kh';
    } else if (searchType === 'ma_ptt') {
      url = 'http://127.0.0.1:5000/thanhtoandonvi/timkiem_theo_ma_ptt';
    }

    const urlWithParams = new URL(url, window.location.origin);
    urlWithParams.search = new URLSearchParams(params).toString();

    setLoading(true);
    setNotFound(false);

    try {
      const customerResponse = await fetch(urlWithParams);
      const rawData = await customerResponse.json();
      console.log('üì¶ K·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API kh√°ch h√†ng:', rawData);

      let customer = null;
      if (Array.isArray(rawData) && rawData.length > 0) {
        customer = rawData[0];
      } else if (rawData && typeof rawData === 'object') {
        customer = rawData;
      }

      if (customer) {
        setCustomerData(customer);
        if (searchType === 'ma_ptt') {
          fetchCertificates(null, customer.ma_ptt);
        } else {
          fetchCertificates(customer.ma_kh);
        }
      } else {
        setCustomerData(null);
        setCertificateData(null);
        setNotFound(true);
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi t√¨m ki·∫øm kh√°ch h√†ng:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchCertificates = async (ma_kh = null, ma_ptt = null) => {
    let url = '';
    let params = {};

    if (searchType === 'ten_don_vi') {
      url = 'http://127.0.0.1:5000/thanhtoandonvi/timkiem_cc_theo_ten_don_vi';
      params = { ten_don_vi: searchTerm };
    } else if (searchType === 'ma_kh') {
      url = 'http://127.0.0.1:5000/thanhtoandonvi/timkiem_cc_theo_ma_dv';
      params = { ma_kh: searchTerm };
    } else if (searchType === 'ma_ptt') {
      url = 'http://127.0.0.1:5000/thanhtoandonvi/timkiem_cc_theo_ma_ptt';
      params = { ma_ptt: searchTerm };
    }

    const urlWithParams = new URL(url, window.location.origin);
    urlWithParams.search = new URLSearchParams(params).toString();

    try {
      const response = await fetch(urlWithParams);
      const data = await response.json();
      console.log('üìÑ Danh s√°ch ch·ª©ng ch·ªâ:', data);

      if (Array.isArray(data) && data.length > 0) {
        setCertificateData(data);
      } else {
        setCertificateData([]);
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi t√¨m ch·ª©ng ch·ªâ:', error);
    }
  };

  const handleConfirmPayment = async () => {
    const isConfirmed = window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën thanh to√°n cho kh√°ch h√†ng n√†y kh√¥ng?');

    if (isConfirmed) {
      const ma_ptt = searchTerm;
      try {
        const response = await fetch('http://127.0.0.1:5000/thanhtoandonvi/capnhat_trangthai_thanhtoan', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ ma_ptt })
        });

        const result = await response.json();

        if (result.success) {
          alert('‚úÖ Thanh to√°n th√†nh c√¥ng!');
          setCustomerData((prev) => ({ ...prev }));
        } else {
          alert('‚ö†Ô∏è C√≥ l·ªói khi thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i!');
        }
      } catch (error) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n:', error);
        alert('L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    }
  };

  // T√≠nh t·ªïng ti·ªÅn
  const calculateTotalAmount = () => {
    if (!certificateData) return 0;
    return certificateData.reduce((total, item) => {
      return total + (item.SOLUONG * item.TongTienCanTra);
    }, 0);
  };

  return (
    <div className="payment-form">
      <h2>üîç T√¨m ki·∫øm kh√°ch h√†ng</h2>

      <div>
        <label>Ch·ªçn lo·∫°i t√¨m ki·∫øm</label>
        <select value={searchType} onChange={(e) => setSearchType(e.target.value)}>
          <option value="ten_don_vi">T√™n ƒë∆°n v·ªã</option>
          <option value="ma_kh">M√£ kh√°ch h√†ng</option>
          <option value="ma_ptt">M√£ phi·∫øu thanh to√°n</option>
        </select>
      </div>

      <input
        type="text"
        placeholder="Nh·∫≠p t·ª´ kh√≥a..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />

      <button onClick={handleSearch} disabled={loading}>
        {loading ? 'ƒêang t√¨m...' : 'T√¨m ki·∫øm'}
      </button>

      {notFound && <p style={{ color: 'red' }}>‚ùå Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng ph√π h·ª£p.</p>}

      {customerData && !loading && (
        <div>
          <h3>üìã Th√¥ng tin kh√°ch h√†ng</h3>
          <div>
            <label>T√™n ƒë∆°n v·ªã</label>
            <input type="text" value={customerData.TENDONVI} readOnly />
          </div>
          <div>
            <label>Email</label>
            <input type="text" value={customerData.EMAIL} readOnly />
          </div>
          <div>
            <label>Tr·∫°ng th√°i thanh to√°n</label>
            <input type="text" value={customerData.TinhTrangThanhToan} readOnly />
          </div>

          <h3>üìö Danh s√°ch ch·ª©ng ch·ªâ</h3>
          {certificateData && certificateData.length > 0 ? (
            <table>
              <thead>
                <tr>
                  <th>T√™n ch·ª©ng ch·ªâ</th>
                  <th>S·ªë l∆∞·ª£ng</th>
                  <th>Ng√†y thi</th>
                  <th>ƒê∆°n gi√°</th>
                </tr>
              </thead>
              <tbody>
                {certificateData.map((item, index) => (
                  <tr key={index}>
                    <td>{item.TenChungChi}</td>
                    <td>{item.SOLUONG}</td>
                    <td>{item.NGAYTHI}</td>
                    <td>{item.TongTienCanTra}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          ) : (
            <p>Kh√¥ng c√≥ ch·ª©ng ch·ªâ n√†o.</p>
          )}

          {/*T·ªïng s·ªë ti·ªÅn c·∫ßn thanh to√°n */}
          <div>
            <label>S·ªë ti·ªÅn c·∫ßn tr·∫£</label>
            <input type="text" value={calculateTotalAmount() + ' VNƒê'} readOnly />
          </div>

          {/* Tr·∫°ng th√°i thanh to√°n */}
          <div>
            <label>T√¨nh tr·∫°ng thanh to√°n</label>
            <input type="text" value={customerData.TinhTrangThanhToan} readOnly />
          </div>

          <button style={{ marginTop: '16px' }} onClick={handleConfirmPayment}>
            X√°c nh·∫≠n thanh to√°n
          </button>
        </div>
      )}
    </div>
  );
}

export default DonVi;
